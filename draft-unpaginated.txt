



Independent                                                    H. Butler
Internet-Draft                                                 Hobu Inc.
Intended status: Informational                                   M. Daly
Expires: November 21, 2013                                       Cadcorp
                                                                A. Doyle
                                                                     MIT
                                                              S. Gillies
                                                     New York University
                                                               T. Schaub
                                                                 OpenGeo
                                                            May 20, 2013


The Geospatial JavaScript Object Notation (GeoJSON) Format Specification
                  draft-sdrees-geojson-format-spec-01

Abstract

   GeoJSON is a geospatial data interchange format based on JavaScript
   Object Notation (JSON).

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on November 21, 2013.

Copyright Notice

   Copyright (c) 2013 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Table of Contents

   1.  Introduction
     1.1.  Conventions Used in This Document
     1.2.  Definitions
     1.3.  Example
   2.  GeoJSON Object
     2.1.  Geometry Object
       2.1.1.  Position
       2.1.2.  Point
       2.1.3.  MultiPoint
       2.1.4.  LineString
       2.1.5.  MultiLineString
       2.1.6.  Polygon
       2.1.7.  MultiPolygon
       2.1.8.  Geometry Collection
     2.2.  Feature Object
     2.3.  Feature Collection Object
   3.  Bounding Box
   4.  Security Considerations
   5.  IANA Considerations
   6.  Normative References
   Appendix A.  Geometry Examples
     A.1.  Point
     A.2.  LineString
     A.3.  Polygon
     A.4.  MultiPoint
     A.5.  MultiLineString
     A.6.  MultiPolygon
     A.7.  GeometryCollection
   Appendix B.  Contributors
   Authors' Addresses


Independent                                                    H. Butler
Internet-Draft                                                 Hobu Inc.
Intended status: Informational                                   M. Daly
Expires: November 21, 2013                                       Cadcorp
                                                                A. Doyle
                                                                     MIT
                                                              S. Gillies
                                                     New York University
                                                               T. Schaub
                                                                 OpenGeo
                                                            May 20, 2013


The Geospatial JavaScript Object Notation (GeoJSON) Format Specification
                  draft-sdrees-geojson-format-spec-01

Abstract

   GeoJSON is a geospatial data interchange format based on JavaScript
   Object Notation (JSON).

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on November 21, 2013.

Copyright Notice

   Copyright (c) 2013 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

1.  Introduction

   Geospatial JavaScript Object Notation (GeoJSON) is a format for
   encoding a variety of geographic data structures.  A GeoJSON object
   may represent a geometry, a feature, or a collection of features.

   GeoJSON supports the following seven geometry types:

   o  Point

   o  LineString

   o  Polygon

   o  MultiPoint

   o  MultiLineString

   o  MultiPolygon

   o  GeometryCollection

   GeoJSON also comprises the types:

   o  Feature

   o  FeatureCollection

   Features in GeoJSON contain a geometry object and additional
   properties, and a FeatureCollection contains an array of features.

   A complete GeoJSON data structure is always an object (in JSON
   terms).  In GeoJSON, an object consists of a collection of name/value
   pairs -- also called members.  For each member, the name is always a
   string.  Member values are either a string, number, object, array or
   one of the JSON literals: true, false, and null.  An array consists
   of elements where each element is a value as described above.

1.1.  Conventions Used in This Document

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in [RFC2119].

   The ordering of the members of any JSON object defined in this
   document MUST be considered irrelevant, as specified by [RFC4627].

   The ordering of the elements of any JSON array defined in this
   document MUST at least follow a stable ordering unless the specific
   object's type it is a member of defines an absolute ordering, which
   then takes precedence.

   Some examples use the combination of a JavaScript single line comment
   (//) followed by an ellipsis (...) as placeholder notation for
   content deemed irrelevant by the authors and at that point.  These
   placeholders must of course be deleted or otherwise replaced, before
   attempting to validate the corresponding JSON code example.

1.2.  Definitions

   o  JavaScript Object Notation (JSON), and the terms object, name,
      value, array, number, true, false, and null are to be interpreted
      as defined in [RFC4627].

   o  Inside this document the term geometry types refers to the seven
      case-sensitive strings: "Point", "MultiPoint", "LineString",
      "MultiLineString", "Polygon", "MultiPolygon", and
      "GeometryCollection".

   o  As another shorthand notation the term GeoJSON types refers to the
      nine case-senisitve strings "Feature", "FeatureCollection" and
      those considered geometry types.

   o  A hole is considered, for the sake of illustration, as simply a
      geometric shape that is to be excluded from the geometric shape in
      which it appears.

   o  When using the term interior geometric shape it is assumed that
      there exists an exterior shape.

1.3.  Example

   A GeoJSON feature collection:

   {
       "type": "FeatureCollection",
       "features": [{
           "type": "Feature",
           "geometry": {
               "type": "Point",
               "coordinates": [102.0, 0.5]
           },
           "properties": {
               "prop0": "value0"
           }
       }, {
           "type": "Feature",
           "geometry": {
               "type": "LineString",
               "coordinates": [
                   [102.0, 0.0],
                   [103.0, 1.0],
                   [104.0, 0.0],
                   [105.0, 1.0]
               ]
           },
           "properties": {
               "prop0": "value0",
               "prop1": 0.0
           }
       }, {
           "type": "Feature",
           "geometry": {
               "type": "Polygon",
               "coordinates": [
                   [
                       [100.0, 0.0],
                       [101.0, 0.0],
                       [101.0, 1.0],
                       [100.0, 1.0],
                       [100.0, 0.0]
                   ]
               ]
           },
           "properties": {
               "prop0": "value0",
               "prop1": {
                   "this": "that"
               }
           }
       }]
   }


   Note that unquoted whitespace is not significant in JSON.  Whitespace
   is used in the examples inside this document to help illustrate the
   data structures, but is not required.

2.  GeoJSON Object

   As stated in the introduction, a complete GeoJSON data structure is
   always represented as a single JSON object that represents a
   geometry, feature, or collection of features and will be referred to
   as the GeoJSON object in this document.

   o  The GeoJSON object MUST have one or more members (name/value
      pairs) including a member with the name "type".  This member's
      value is a case-sensitive string that determines the type of the
      GeoJSON object by being one of GeoJSON types.  If - depending on
      this value - additional rules apply, then these are stated in the
      following sections where each type is further defined.

   o  A GeoJSON object MAY have a "bbox" member.  If it is present, the
      value of it MUST be a bounding box array (see "3.  Bounding Box").

2.1.  Geometry Object

   A geometry is a GeoJSON object where the type member's value is a
   geometry type.

   A GeoJSON geometry object of any type other than "GeometryCollection"
   MUST have a member with the name "coordinates".  The value of the
   coordinates member is always an array.  The structure for the
   elements in this array is determined by the type of geometry.

2.1.1.  Position

   A position is the fundamental geometry construct.  The "coordinates"
   member of a geometry object is composed of either:

   o  one position (in the case of a Point geometry),

   o  an array of positions (LineString or MultiPoint geometries),

   o  an array of arrays of positions (Polygons, MultiLineStrings),

   o  or a multidimensional array of positions (MultiPolygon).

   A position is represented by an array of numbers.  There MUST be two
   or more elements.  In general the first two elements will be World
   Geodetic System (WGS 84) longitude and latitude, precisely in that
   order, and a third (optionally) will be altitude in meters.

   Any number of additional elements are allowed -- interpretation and
   meaning of additional elements is beyond the scope of this
   specification.

   Examples of positions and geometries are provided in "Appendix A.
   Geometry Examples".

2.1.2.  Point

   For type "Point", the "coordinates" member MUST be a single position.

2.1.3.  MultiPoint

   For type "MultiPoint", the "coordinates" member MUST be an array of
   positions.

2.1.4.  LineString

   For type "LineString", the "coordinates" member MUST be an array of
   two or more positions.

2.1.5.  MultiLineString

   For type "MultiLineString", the "coordinates" member MUST be an array
   of LineString coordinate arrays.

2.1.6.  Polygon

   To specify a constraint specific to polygons, it is useful to
   introduce the concept of a linear ring (LinearRing):

   o  A LinearRing is a closed LineString with 4 or more positions.

   o  The first and last positions are equivalent (they represent
      equivalent points).

   This leads to a canonical formulation of the Polygon geometry type
   definition as follows:

   o  For type "Polygon", the "coordinates" member MUST be an array of
      LinearRing coordinate arrays.

   o  For Polygons with more than one of these rings, the first MUST be
      the exterior ring and any others MUST be interior rings or holes.

2.1.7.  MultiPolygon

   For type "MultiPolygon", the "coordinates" member MUST be an array of
   Polygon coordinate arrays.

2.1.8.  Geometry Collection

   A GeoJSON object with type "GeometryCollection" is a geometry object
   which represents a collection of geometry objects.

   A geometry collection MUST have a member with the name "geometries".
   The value corresponding to "geometries" is an array.  Each element in
   this array is a GeoJSON geometry object.

2.2.  Feature Object

   A GeoJSON object with the type "Feature" is a feature object.

   o  A feature object MUST have a member with the name "geometry".  The
      value of the geometry member is a geometry object as defined above
      or a JSON null value.

   o  A feature object MUST have a member with the name "properties".
      The value of the properties member is an object (any JSON object
      or a JSON null value).

   o  If a feature has a commonly used identifier, that identifier
      SHOULD be included as a member of the feature object with the name
      "id".

2.3.  Feature Collection Object

   A GeoJSON object with the type "FeatureCollection" is a feature
   collection object.

   An object of type "FeatureCollection" MUST have a member with the
   name "features".  The value corresponding to "features" is an array.
   Each element in the array is a feature object as defined above.

3.  Bounding Box

   A GeoJSON object MAY have a member named "bbox" to include
   information on the coordinate range for geometries, features, or
   feature collections.  The value of the bbox member MUST be an array
   of length 2*n where n is the number of dimensions represented in the
   contained geometries, with the lowest values for all axes followed by
   the highest values.  The axes order of a bbox follows the axes order
   of geometries.  In addition, the coordinate reference system for the
   bbox is assumed to match the coordinate reference system of the
   GeoJSON object of which it is a member.

   Example of a bbox member on a feature:

   {
       "type": "Feature",
       "bbox": [-180.0, -90.0, 180.0, 90.0],
       "geometry": {
           "type": "Polygon",
           "coordinates": [
               [
                   [-180.0, 10.0],
                   [20.0, 90.0],
                   [180.0, -5.0],
                   [-30.0, -90.0]
               ]
           ]
       }
       //...
   }


   Example of a bbox member on a feature collection:

   {
       "type": "FeatureCollection",
       "bbox": [100.0, 0.0, 105.0, 1.0],
       "features": [
       //...
       ]
   }


4.  Security Considerations

   This specification has the same security considerations as JSON
   [RFC4627].

5.  IANA Considerations

   This document has no actions for IANA.

6.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119, March 1997.

   [RFC4627]  Crockford, D., "The application/json Media Type for
              JavaScript Object Notation (JSON)", RFC 4627, July 2006.

Appendix A.  Geometry Examples

   Each of the examples below represents a valid and complete GeoJSON
   object.

A.1.  Point

   Point coordinates are in x, y order (easting, northing for projected
   coordinates, longitude, latitude for geographic coordinates):

   {
       "type": "Point",
       "coordinates": [100.0, 0.0]
   }


A.2.  LineString

   Coordinates of LineString are an array of positions (see "2.1.1.
   Position"):

   {
       "type": "LineString",
       "coordinates": [
           [100.0, 0.0],
           [101.0, 1.0]
       ]
   }


A.3.  Polygon

   Coordinates of a Polygon are an array of LinearRing (cf.  "2.1.6
   Polygon") coordinate arrays.  The first element in the array
   represents the exterior ring.  Any subsequent elements represent
   interior rings (or holes).

   No holes:

   {
       "type": "Polygon",
       "coordinates": [
           [
               [100.0, 0.0],
               [101.0, 0.0],
               [101.0, 1.0],
               [100.0, 1.0],
               [100.0, 0.0]
           ]
       ]
   }


   With holes:

   {
       "type": "Polygon",
       "coordinates": [
           [
               [100.0, 0.0],
               [101.0, 0.0],
               [101.0, 1.0],
               [100.0, 1.0],
               [100.0, 0.0]
           ],
           [
               [100.2, 0.2],
               [100.8, 0.2],
               [100.8, 0.8],
               [100.2, 0.8],
               [100.2, 0.2]
           ]
       ]
   }


A.4.  MultiPoint

   Coordinates of a MultiPoint are an array of positions::

   {
       "type": "MultiPoint",
       "coordinates": [
           [100.0, 0.0],
           [101.0, 1.0]
       ]
   }


A.5.  MultiLineString

   Coordinates of a MultiLineString are an array of LineString
   coordinate arrays:

   {
       "type": "MultiLineString",
       "coordinates": [
           [
               [100.0, 0.0],
               [101.0, 1.0]
           ],
           [
               [102.0, 2.0],
               [103.0, 3.0]
           ]
       ]
   }


A.6.  MultiPolygon

   Coordinates of a MultiPolygon are an array of Polygon coordinate
   arrays:

   {
       "type": "MultiPolygon",
       "coordinates": [
           [
               [
                   [102.0, 2.0],
                   [103.0, 2.0],
                   [103.0, 3.0],
                   [102.0, 3.0],
                   [102.0, 2.0]
               ]
           ],
           [
               [
                   [100.0, 0.0],
                   [101.0, 0.0],
                   [101.0, 1.0],
                   [100.0, 1.0],
                   [100.0, 0.0]
               ],
               [
                   [100.2, 0.2],
                   [100.8, 0.2],
                   [100.8, 0.8],
                   [100.2, 0.8],
                   [100.2, 0.2]
               ]
           ]
       ]
   }


A.7.  GeometryCollection

   Each element in the geometries array of a GeometryCollection is one
   of the geometry objects described above:

   {
       "type": "GeometryCollection",
       "geometries": [{
           "type": "Point",
           "coordinates": [100.0, 0.0]
       }, {
           "type": "LineString",
           "coordinates": [
               [101.0, 0.0],
               [102.0, 1.0]
           ]
       }]
   }


Appendix B.  Contributors

   o  Howard Butler (Hobu Inc.),

   o  Martin Daly (Cadcorp),

   o  Allan Doyle (MIT),

   o  Sean Gillies (UNC-Chapel Hill),

   o  Tim Schaub (OpenGeo),

   o  Christopher Schmidt (MetaCarta)

   The GeoJSON format specification is the product of discussion on the
   GeoJSON list:

   http://lists.geojson.org/listinfo.cgi/geojson-geojson.org

Authors' Addresses

   H. Butler
   Hobu Inc.


   M. Daly
   Cadcorp


   A. Doyle
   MIT


   S. Gillies
   New York University


   T. Schaub
   OpenGeo

